{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nimport remark from 'remark';\nimport html from 'remark-html';\nconst contentDirectory = path.join(process.cwd(), 'static/content');\nexport async function getData() {\n  const fullPath = path.join(contentDirectory, `about.md`);\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Use remark to convert markdown into HTML string\n\n  const processedContent = await remark().use(html).process(matterResult.content);\n  const contentHtml = processedContent.toString();\n  console.log(\"sss\");\n  console.log(contentHtml); // Combine the data with the contentHtml\n\n  return _objectSpread({\n    contentHtml\n  }, matterResult.data);\n}\nexport function getSortedExperiencesData() {\n  const experiencesDirectory = path.join(contentDirectory, 'experiences'); // Get file names under /content/experiences\n\n  const fileNames = fs.readdirSync(experiencesDirectory);\n  const allExperiencesData = fileNames.map(fileName => {\n    // Read markdown file as string\n    const fullPath = path.join(experiencesDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents);\n    return _objectSpread({}, matterResult.data);\n  }); // Sort posts by date\n\n  return allExperiencesData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}\nexport function getSortedEducationData() {\n  const educationDirectory = path.join(contentDirectory, 'education'); // Get file names under /content/experiences\n\n  const fileNames = fs.readdirSync(educationDirectory);\n  const allEducationData = fileNames.map(fileName => {\n    // Read markdown file as string\n    const fullPath = path.join(educationDirectory, fileName);\n    const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n    const matterResult = matter(fileContents);\n    return _objectSpread({}, matterResult.data);\n  }); // Sort posts by date\n\n  return allEducationData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n}","map":{"version":3,"sources":["/home/midovsky/Desktop/cv-nextjs/lib/about.js"],"names":["fs","path","matter","remark","html","contentDirectory","join","process","cwd","getData","fullPath","fileContents","readFileSync","matterResult","processedContent","use","content","contentHtml","toString","console","log","data","getSortedExperiencesData","experiencesDirectory","fileNames","readdirSync","allExperiencesData","map","fileName","sort","a","b","date","getSortedEducationData","educationDirectory","allEducationData"],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport matter from 'gray-matter'\nimport remark from 'remark'\nimport html from 'remark-html'\n\nconst contentDirectory = path.join(process.cwd(), 'static/content')\n\nexport async function getData() {\n  const fullPath = path.join(contentDirectory, `about.md`)\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n  // Use gray-matter to parse the post metadata section\n  const matterResult = matter(fileContents)\n\n  // Use remark to convert markdown into HTML string\n  const processedContent = await remark()\n    .use(html)\n    .process(matterResult.content)\n  const contentHtml = processedContent.toString()\n\n    console.log(\"sss\");\n    console.log(contentHtml);\n  // Combine the data with the contentHtml\n  return {\n    contentHtml,\n    ...matterResult.data\n  }\n}\n\n\nexport function getSortedExperiencesData() {\n\n  const experiencesDirectory = path.join(contentDirectory, 'experiences')\n\n\n  // Get file names under /content/experiences\n  const fileNames = fs.readdirSync(experiencesDirectory)\n  const allExperiencesData = fileNames.map(  (fileName) => {\n\n    // Read markdown file as string\n    const fullPath = path.join(experiencesDirectory, fileName)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n    \n\n    \n\n\nreturn {\n    ...matterResult.data\n  \n}\n\n\n  })\n   // Sort posts by date\n  return allExperiencesData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1\n    } else {\n      return -1\n    }\n  }) \n}\n\nexport function getSortedEducationData() {\n\n  const educationDirectory = path.join(contentDirectory, 'education')\n\n\n  // Get file names under /content/experiences\n  const fileNames = fs.readdirSync(educationDirectory)\n  const allEducationData = fileNames.map(  (fileName) => {\n\n    // Read markdown file as string\n    const fullPath = path.join(educationDirectory, fileName)\n    const fileContents = fs.readFileSync(fullPath, 'utf8')\n\n    // Use gray-matter to parse the post metadata section\n    const matterResult = matter(fileContents)\n    \n\nreturn {\n    ...matterResult.data\n  \n}\n\n\n  })\n   // Sort posts by date\n  return allEducationData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1\n    } else {\n      return -1\n    }\n  }) \n}"]},"metadata":{},"sourceType":"module"}